---
- name: Load variables for graphical tasks
  ansible.builtin.include_vars: vars/graphical.yml

- name: Install Gnome packages for Ubuntu
  ansible.builtin.apt:
    name: "{{ ubuntu_gnome_pkgs }}"
    state: present
  when: desktop == "gnome" and ansible_distribution == "Ubuntu"

- name: Configure Gnome
  become: false
  community.general.dconf:
    key: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
  loop: "{{ gnome_conf }}"
  when: desktop == "gnome"

- name: Install Ubuntu HW video drivers
  ansible.builtin.apt:
    name: "{{ x64_ubuntu_video_driver_pkgs }}"
    state: present
  when: ansible_distribution == "Ubuntu" and ansible_architecture == "x86_64"

- name: Configure foot.ini for all user
  vars:
    foot_dir: "/etc/xdg/foot"
  block:
    - name: Create directory
      ansible.builtin.file:
        path: "{{ foot_dir }}"
        state: directory
        mode: u=rwx,go=rx

    - name: Deploy foot.ini
      ansible.builtin.template:
        src: "foot.ini.j2"
        dest: "{{ foot_dir }}/foot.ini"
        mode: ugo=r

- name: Enable Wayland for apps
  vars:
    environ_dir: "~/.config/environment.d"
  block:
    - name: Create user's environment.d directory
      become: false
      ansible.builtin.file:
        path: "{{ environ_dir }}"
        state: directory
        mode: u=rwx,go=

    - name: Set user's environment variables to enable Wayland
      become: false
      ansible.builtin.template:
        src: "wayland-profile.conf.j2"
        dest: "{{ environ_dir }}/10-wayland-profile.conf"
        mode: u=rw,go=

    - name: Deploy Wayland specific desktop files
      ansible.builtin.template:
        src: "{{ item }}.j2"
        dest: "/usr/share/applications/{{ item }}"
        owner: root
        group: root
        mode: u=rw,go=r
      loop:
        - "Wayland-Code.desktop"
        - "Wayland-Google-Chrome.desktop"

- name: Install VSCode extensions
  become: false
  block:
    - name: Query installed extensions
      ansible.builtin.command:
        argv:
          - code
          - --list-extensions
      register: list_extensions_output
      changed_when: false
      failed_when: list_extensions_output.rc != 0

    - name: Prep lists
      ansible.builtin.set_fact:
        lower_installed: "{{ list_extensions_output.stdout_lines | lower }}"
        lower_to_list: "{{ vscode_extensions | lower }}"

    - name: Find the list of extensions to be installed
      ansible.builtin.set_fact:
        to_be_installed: "{{ lower_to_list | difference(lower_installed) }}"

    - name: Install VSCode extensions
      ansible.builtin.command:
        argv:
          - code
          - --install-extension
          - "{{ item }}"
      loop: "{{ to_be_installed }}"
